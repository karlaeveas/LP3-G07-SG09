/*************************************************************************************************
ARCHIVO		: CODIGON002.JAVA
FECHA		: 04/08/2024
DESCRIPCIÓN	: Método genérico para imprimir un arreglo completo y sobrecargado para imprimir porciones con validación de índices.
*************************************************************************************************/

public class PruebaMetodoGenerico {

    // Método genérico para imprimir todo el arreglo
    public static <E> void imprimirArreglo(E[] arregloEntrada) {
        // Muestra los elementos del arreglo
        for (E elemento : arregloEntrada) {
            System.out.printf("%s ", elemento);
        }
        System.out.println();
    }

    // Método sobrecargado para imprimir una porción del arreglo
    public static <E> int imprimirArreglo(E[] arregloEntrada, int subindiceInferior, int subindiceSuperior) throws InvalidSubscriptException {
        // Validar que los índices estén dentro del rango
        if (subindiceInferior < 0 || subindiceSuperior >= arregloEntrada.length || subindiceSuperior < subindiceInferior) {
            throw new InvalidSubscriptException("Índices inválidos.");
        }

        // Imprimir solo la parte del arreglo dentro del rango de índices
        for (int i = subindiceInferior; i <= subindiceSuperior; i++) {
            System.out.printf("%s ", arregloEntrada[i]);
        }
        System.out.println();

        // Retornar la cantidad de elementos impresos
        return subindiceSuperior - subindiceInferior + 1;
    }

    public static void main(String[] args) {
        // Crea arreglos de objetos Integer, Double y Character
        Integer[] arregloInteger = { 1, 2, 3, 4, 5, 6 };
        Double[] arregloDouble = { 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7 };
        Character[] arregloCharacter = { 'H', 'O', 'L', 'A' };

        System.out.println("El arreglo arregloInteger contiene:");
        imprimirArreglo(arregloInteger); // Pasa un arreglo Integer

        System.out.println("\nEl arreglo arregloDouble contiene:");
        imprimirArreglo(arregloDouble); // Pasa un arreglo Double

        System.out.println("\nEl arreglo arregloCharacter contiene:");
        imprimirArreglo(arregloCharacter); // Pasa un arreglo Character

        // Ejemplo de la versión sobrecargada con validación de índices
        try {
            System.out.println("\nImprimiendo parte del arreglo arregloInteger (índices 1 a 4):");
            int elementosImpresos = imprimirArreglo(arregloInteger, 1, 4);
            System.out.println("Cantidad de elementos impresos: " + elementosImpresos);
        } catch (InvalidSubscriptException e) {
            System.out.println(e.getMessage());
        }

        // Intento con índices inválidos para generar la excepción
        try {
            System.out.println("\nIntentando imprimir arregloInteger con índices inválidos (5 a 1):");
            imprimirArreglo(arregloInteger, 5, 1);
        } catch (InvalidSubscriptException e) {
            System.out.println(e.getMessage());
        }
    }
}

// Definición de la excepción personalizada para índices inválidos
class InvalidSubscriptException extends Exception {
    public InvalidSubscriptException(String mensaje) {
        super(mensaje);
    }
}
